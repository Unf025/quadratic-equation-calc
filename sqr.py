# Задачи
# Самое главное решить проблеммы с коментарием начинающимся на !!err
# 1. защита от дурака:
#	a. добавить условие при num не равном ни 1 ни 2, в котором будет вывдиться сообщение что введены неверные данные и пусть вводит их заново
#   б. добавить проверку первого коэффициента-если он равен нулю то алгоритм выдаст ошибку, нужно сказать юзеру что если а=0 то это уже не квадратное уравнение поскольку X^2 исчезнет 
#	в. так же в проверке можно определять если а=1 то уравнение приведенное, если b=0 или с=0 то уравнение не полное
# 2. выводить график функции (удалить все # !! uncom  и тогда появится пример)

import numpy as np # подключение крутой библиотеки numpy -https://pythonworld.ru/numpy/1.html. !!! поначалу может быть непонятно
import matplotlib.pyplot as plt # подключение крутой библиотеки  matplotlib - https://nbviewer.jupyter.org/github/whitehorn/Scientific_graphics_in_python/blob/master/P1%20Chapter%201%20Pyplot.ipynb

from math  import sqrt # Говорим программе, что здесь будут математические вычисления и подключаем функцию квадратных корней
def MenuSelEquat(): # Создаем функцию выбора меню 
	print("Выберите нужный пункт меню.") # Ну тут и так все понятно
	print("1. Решение квадратного уравнения.") # Ну тут и так все понятно
	print('2. Решение биквадратного уравнения.') # Ну тут и так все понятно 
	print("EXIT") # Ну тут и так все понятно 
	return input("") # Функция возвращает введенные пользователем данные

num = MenuSelEquat() # Переменная, которая равна тому, что введет пользователь
def GetInputData():
    data  = { 'a' : int(input("a= ")), # поскольку из названии функции нам ясно что данные вводимые, то назовем словарь просто дата
              'b' : int(input("b= ")),
              'c' : int(input("c= "))            
    }
    return data # функция возвращает данный словарь. 


# Функция вычеслений 
def SolvQuadEquat(input): # Функция вычислений принимает аргумент введенного пользователем числа и проводит вычисления
		d = input['b']**2 - 4 * input['a'] * input['c'] #Нахождение дискриминанта из полученных данных
		print('Дискриминант = ', d) # Вывод на экран значение дискриминанта
		if d > 0: # Если дискриминант больше 0, то мы выводим сообщение о том, что будет 2 действительных корня
			print("2 корня")# Ну тут и так все понятно
			x1 = (-input['b'] + sqrt(d)) / (2*input['a']) # Тут программа находит первый корень из полученных от пользователя данных
			x2 = (-input['b'] - sqrt(d)) / (2*input['a']) # Тут программа находит второй корень из полученных от пользователя данных
		elif d == 0: # Если дискриминант равен 0, то программа выводит сообщение о том, что мы получим 1 корень
			print("1 корень") # Ну тут и так все понятно
			x1 = -input['b']/(2*input['a']) # Тут программа находит 1 и так скажем единственный корень
			x2 = None # Так как у нас должен быть 1 корень, то 2 корню мы просто придаем значение None
		else: # Иначе, т.е когда дискриминант меньше нуля
			x1 = None # Т.к действительных корней нет, то мы приравниваем их к значению None
			x2 = None
			print('Нет действительных корней') # на самом деле корни есть, но они находяться на мнимой оси координат, которую в школе не проходят)	
		return ({"x1":x1,"x2":x2, "d":d}) # Тут программа возвращает нам данные о корнях и дискриминанте


def CalcQadraticY(x,data): #функция вычисляет y квадратной функции, для построения графика
    a=data['a']
    b=data['b']
    c=data['c']
	
    return a*x**2+b*x+c


while num != "exit": # Пока значенние num(при выборе пункта меню) не равно "exit", мы выполняем программу
	if num == '1': # Если значение num(при выборе пункта меню) равно 1, мы выполняем решение квадратных уравнений
		print("ax^2 + bx + c = 0") # Выводим вид квадратного уравнения на экран 

		input_data = GetInputData() # Тут программа вызывает переменнную input_data, которая берет данные введенные пользователем из функции GetInputData
		
		result = SolvQuadEquat(input_data) # Тут программа вызывает переменнную result, которая обращается к функции SolvQuadEquat и выполняет вычисления из данных input_data
		print("Ответ:")  # Вывести на экран слово ответ, а затем пойдут уже значения корней
		if result['x1'] != None: # Если х1 не равен None, то программа нам выводит, чему равен этот х1
			 print("x1= %.2f" % (result['x1'])) # Вот этот вывод х1
		else: # Иначе, т.е если х1 = None, то программа выводит, слово "Нету", т.е нет корня
			print("x1= нету") # Нету х1
		if result['x2'] != None:  # Если х2 не равен None, то программа нам выводит, чему равен этот х2
			 print("x2= %.2f" % (result['x2'])) # Вот этот вывод х2
		else: # Иначе, т.е если х2 = None, то программа выводит, слово "Нету", т.е нет корня
			print("x2= нету") # Нету х2
		## кусок для построения графика
		x = np.linspace(-10,+10, 201)  # создаем массив (несколько значений) от -10 до +10, этих значений будет 201, это и будут точки по оси х
		print(x) #просто чтобы увидеть как выглядит массив
		y = CalcQadraticY(x,input_data) # по этим значениям x расчитываем y для квадратной функции 
		plt.plot(x, y) # построить график по оси икс откладывая массив х, а по у  у которые посчитали выше
		plt.axhline(y=0, color='k')  #строим линию оси Y  проходящую через 0 черным цветом
		plt.axvline(x=0, color='k')	 #	строим линию оси x  проходящую через 0 черным цветом
		
		plt.show() # показать этот график в окне

		
	elif num == '2': # Если num(При выборе пункта меню) равно 2, то программа выполняет решение биквадратных уравнений
		print("ax^4 + bx^2 + c = 0") # Вывод на экран вида биквадратного уравнения
		print('x^2 = t') # Вывод на экран замены х^2 = t. Это делается, для того, чтобы потом получить квадратное уравнение
		print('at^2 + bt + c = 0') # Вывод на экран уравнение с заменой. Т.е. вывели уже квадратное уравнение и решать будем его
		input_data = GetInputData() # Тут программа вызывает переменнную input_data, которая берет данные введенные пользователем из функции GetInputData
		 # Тут по сути идет тоже самое, что и при решении квадратных уравнений, просто х, заменен на t
		result = SolvQuadEquat(input_data)  # Тут программа вызывает переменнную result, которая обращается к функции SolvQuadEquat и выполняет вычисления из данных input_data
		if result['x1'] != None:  # Тут написано х1, просто, чтобы не выполнять разные вычисления для уравнений. Т.к формулы одинаковые. 
			 print("t1= %.2f" % (result['x1']))  # Тут программа выводит на экран значение t, котое в коде обозначено как х. Но это неважно
		else: # Если значение х1(t) равно None
			print("t1= нету") # Вывод на экран, что t1 отсутствует
		if result['x2'] != None: # Если значение х2(t2) не равно None, то идет вычисление
			 print("t2= %.2f" % (result['x2'])) # Вывод на экран корня t2(х2)
		else: # Если значение х2(t2) равно None
			print("t2= нету") # Вывод на экран, что t2 отсутствует
		if result ["d"] > 0: # Если значение дискриминанта больше 0
			print("x1^2= %.2f; x2^2= %.2f" % (result['x1'], result['x2'])) # Вывод на экран значения х1^2 и х2^2
		# Тут уже пошли вычисления конечных корней х
			print("Ответ:") # Вывести на экран слово ответ, а затем пойдут уже значения корней
			if result['x1'] > 0: # Если значение х1(t1) больше 0
				print('x1= %.2f' % (sqrt(result['x1']))) # Вывести на экран значение х1, которое равно √t1(х1)
				print('x2=- %.2f' % (sqrt(result['x1']))) # Вывести на экран значение х2, которое равно -√t1(х1)
			if result['x2'] > 0: # Если значение х2 больше 0 
				print('x3= %.2f' % (sqrt(result['x2']))) # Вывести на экран значение х3,которое равно √t2(х2)
				print('x4=- %.2f' % (sqrt(result['x2'])))# Вывести на экран значение х4, которое равно -√t2(х2)
				
			else: # Иначе. Т.е значение t2 < 0 
				print('x3 = None') # Вывести на экран то, что х3 отсутствует
				print('x4 = None') # Вывести на экран то, что х4 отсутствует
		elif result ['d'] == 0:  # Если дискриминант =0
			print('x^2= ', result['x1'])  # Вывести на экран значение х^2, которое равно t(x1)
			print("x=+- ", sqrt(result['x1']))  # Вывести на экран значение х, равное +-√t(x1)

	else: # Если пункт меню не 1, не 2 и не exit
		print("Вы выбрали несуществующий пункт меню!") # Вывести на экран "Вы выбрали несуществующий пункт меню!"
	num = MenuSelEquat() # Вернуться к выбору пункта меню